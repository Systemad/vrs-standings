/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { WeatherForecastGetQueryResponse } from '../../types/WeatherForecastGet.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const weatherForecastGetInfiniteQueryKey = () => [{ url: '/WeatherForecast' }] as const

export type WeatherForecastGetInfiniteQueryKey = ReturnType<typeof weatherForecastGetInfiniteQueryKey>

/**
 * {@link /WeatherForecast}
 */
export async function weatherForecastGetInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<WeatherForecastGetQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/WeatherForecast`, ...requestConfig })
  return res.data
}

export function weatherForecastGetInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = weatherForecastGetInfiniteQueryKey()
  return infiniteQueryOptions<WeatherForecastGetQueryResponse, ResponseErrorConfig<Error>, WeatherForecastGetQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return weatherForecastGetInfinite(config)
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) => lastPage['pageNumber'],
    getPreviousPageParam: (firstPage) => firstPage['pageNumber'],
  })
}

/**
 * {@link /WeatherForecast}
 */
export function useWeatherForecastGetInfinite<
  TData = InfiniteData<WeatherForecastGetQueryResponse>,
  TQueryData = WeatherForecastGetQueryResponse,
  TQueryKey extends QueryKey = WeatherForecastGetInfiniteQueryKey,
>(
  options: {
    query?: Partial<InfiniteQueryObserverOptions<WeatherForecastGetQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? weatherForecastGetInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(weatherForecastGetInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}