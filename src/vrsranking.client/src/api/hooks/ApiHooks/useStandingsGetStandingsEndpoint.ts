/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { StandingsGetStandingsEndpointQueryResponse, StandingsGetStandingsEndpointPathParams } from '../../types/StandingsGetStandingsEndpoint.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const standingsGetStandingsEndpointQueryKey = (
  region: StandingsGetStandingsEndpointPathParams['region'],
  date: StandingsGetStandingsEndpointPathParams['date'],
) => [{ url: '/api/standings/:region/:date', params: { region: region, date: date } }] as const

export type StandingsGetStandingsEndpointQueryKey = ReturnType<typeof standingsGetStandingsEndpointQueryKey>

/**
 * {@link /api/standings/:region/:date}
 */
export async function standingsGetStandingsEndpoint(
  region: StandingsGetStandingsEndpointPathParams['region'],
  date: StandingsGetStandingsEndpointPathParams['date'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StandingsGetStandingsEndpointQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/standings/${region}/${date}`,
    ...requestConfig,
  })
  return res.data
}

export function standingsGetStandingsEndpointQueryOptions(
  region: StandingsGetStandingsEndpointPathParams['region'],
  date: StandingsGetStandingsEndpointPathParams['date'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = standingsGetStandingsEndpointQueryKey(region, date)
  return queryOptions<StandingsGetStandingsEndpointQueryResponse, ResponseErrorConfig<Error>, StandingsGetStandingsEndpointQueryResponse, typeof queryKey>({
    enabled: !!(region && date),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return standingsGetStandingsEndpoint(region, date, config)
    },
  })
}

/**
 * {@link /api/standings/:region/:date}
 */
export function useStandingsGetStandingsEndpoint<
  TData = StandingsGetStandingsEndpointQueryResponse,
  TQueryData = StandingsGetStandingsEndpointQueryResponse,
  TQueryKey extends QueryKey = StandingsGetStandingsEndpointQueryKey,
>(
  region: StandingsGetStandingsEndpointPathParams['region'],
  date: StandingsGetStandingsEndpointPathParams['date'],
  options: {
    query?: Partial<QueryObserverOptions<StandingsGetStandingsEndpointQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? standingsGetStandingsEndpointQueryKey(region, date)

  const query = useQuery(
    {
      ...(standingsGetStandingsEndpointQueryOptions(region, date, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}