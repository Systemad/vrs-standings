/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type {
  StandingsGetAvailableStandingsEndpointsQueryResponse,
  StandingsGetAvailableStandingsEndpointsPathParams,
} from '../../types/StandingsGetAvailableStandingsEndpoints.ts'
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const standingsGetAvailableStandingsEndpointsInfiniteQueryKey = (region: StandingsGetAvailableStandingsEndpointsPathParams['region']) =>
  [{ url: '/api/standings/available/:region', params: { region: region } }] as const

export type StandingsGetAvailableStandingsEndpointsInfiniteQueryKey = ReturnType<typeof standingsGetAvailableStandingsEndpointsInfiniteQueryKey>

/**
 * {@link /api/standings/available/:region}
 */
export async function standingsGetAvailableStandingsEndpointsInfinite(
  region: StandingsGetAvailableStandingsEndpointsPathParams['region'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StandingsGetAvailableStandingsEndpointsQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/standings/available/${region}`,
    ...requestConfig,
  })
  return res
}

export function standingsGetAvailableStandingsEndpointsInfiniteQueryOptions(
  region: StandingsGetAvailableStandingsEndpointsPathParams['region'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = standingsGetAvailableStandingsEndpointsInfiniteQueryKey(region)
  return infiniteQueryOptions<
    ResponseConfig<StandingsGetAvailableStandingsEndpointsQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<StandingsGetAvailableStandingsEndpointsQueryResponse>,
    typeof queryKey
  >({
    enabled: !!region,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return standingsGetAvailableStandingsEndpointsInfinite(region, config)
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) => lastPage['pageNumber'],
    getPreviousPageParam: (firstPage) => firstPage['pageNumber'],
  })
}

/**
 * {@link /api/standings/available/:region}
 */
export function useStandingsGetAvailableStandingsEndpointsInfinite<
  TData = InfiniteData<ResponseConfig<StandingsGetAvailableStandingsEndpointsQueryResponse>>,
  TQueryData = ResponseConfig<StandingsGetAvailableStandingsEndpointsQueryResponse>,
  TQueryKey extends QueryKey = StandingsGetAvailableStandingsEndpointsInfiniteQueryKey,
>(
  region: StandingsGetAvailableStandingsEndpointsPathParams['region'],
  options: {
    query?: Partial<
      InfiniteQueryObserverOptions<ResponseConfig<StandingsGetAvailableStandingsEndpointsQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? standingsGetAvailableStandingsEndpointsInfiniteQueryKey(region)

  const query = useInfiniteQuery(
    {
      ...(standingsGetAvailableStandingsEndpointsInfiniteQueryOptions(region, config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}