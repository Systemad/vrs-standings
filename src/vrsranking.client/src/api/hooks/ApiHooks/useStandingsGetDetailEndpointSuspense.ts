/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { StandingsGetDetailEndpointQueryResponse, StandingsGetDetailEndpointPathParams } from '../../types/StandingsGetDetailEndpoint.ts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const standingsGetDetailEndpointSuspenseQueryKey = (
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
) => [{ url: '/api/markdown/:date/:filename', params: { date: date, filename: filename } }] as const

export type StandingsGetDetailEndpointSuspenseQueryKey = ReturnType<typeof standingsGetDetailEndpointSuspenseQueryKey>

/**
 * {@link /api/markdown/:date/:filename}
 */
export async function standingsGetDetailEndpointSuspense(
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StandingsGetDetailEndpointQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/markdown/${date}/${filename}`,
    ...requestConfig,
  })
  return res
}

export function standingsGetDetailEndpointSuspenseQueryOptions(
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = standingsGetDetailEndpointSuspenseQueryKey(date, filename)
  return queryOptions<
    ResponseConfig<StandingsGetDetailEndpointQueryResponse>,
    ResponseErrorConfig<Error>,
    ResponseConfig<StandingsGetDetailEndpointQueryResponse>,
    typeof queryKey
  >({
    enabled: !!(date && filename),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return standingsGetDetailEndpointSuspense(date, filename, config)
    },
  })
}

/**
 * {@link /api/markdown/:date/:filename}
 */
export function useStandingsGetDetailEndpointSuspense<
  TData = ResponseConfig<StandingsGetDetailEndpointQueryResponse>,
  TQueryKey extends QueryKey = StandingsGetDetailEndpointSuspenseQueryKey,
>(
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
  options: {
    query?: Partial<UseSuspenseQueryOptions<ResponseConfig<StandingsGetDetailEndpointQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? standingsGetDetailEndpointSuspenseQueryKey(date, filename)

  const query = useSuspenseQuery(
    {
      ...(standingsGetDetailEndpointSuspenseQueryOptions(date, filename, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}