/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { StandingsGetDetailEndpointQueryResponse, StandingsGetDetailEndpointPathParams } from '../../types/StandingsGetDetailEndpoint.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const standingsGetDetailEndpointQueryKey = (
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
) => [{ url: '/api/markdown/:date/:filename', params: { date: date, filename: filename } }] as const

export type StandingsGetDetailEndpointQueryKey = ReturnType<typeof standingsGetDetailEndpointQueryKey>

/**
 * {@link /api/markdown/:date/:filename}
 */
export async function standingsGetDetailEndpoint(
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<StandingsGetDetailEndpointQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/markdown/${date}/${filename}`,
    ...requestConfig,
  })
  return res.data
}

export function standingsGetDetailEndpointQueryOptions(
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = standingsGetDetailEndpointQueryKey(date, filename)
  return queryOptions<StandingsGetDetailEndpointQueryResponse, ResponseErrorConfig<Error>, StandingsGetDetailEndpointQueryResponse, typeof queryKey>({
    enabled: !!(date && filename),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return standingsGetDetailEndpoint(date, filename, config)
    },
  })
}

/**
 * {@link /api/markdown/:date/:filename}
 */
export function useStandingsGetDetailEndpoint<
  TData = StandingsGetDetailEndpointQueryResponse,
  TQueryData = StandingsGetDetailEndpointQueryResponse,
  TQueryKey extends QueryKey = StandingsGetDetailEndpointQueryKey,
>(
  date: StandingsGetDetailEndpointPathParams['date'],
  filename: StandingsGetDetailEndpointPathParams['filename'],
  options: {
    query?: Partial<QueryObserverOptions<StandingsGetDetailEndpointQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? standingsGetDetailEndpointQueryKey(date, filename)

  const query = useQuery(
    {
      ...(standingsGetDetailEndpointQueryOptions(date, filename, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}